---

name: Predicates
theory: |

  Recall the function `isInfant` from the previous lesson:

  ```java
  public static boolean isInfant(int age) {
    return age < 1;
  }
  ```

  `isInfant` is a predicate function.

  **The predicate answers the yes or no question by returning a boolean value.**

  Predicates in all languages ​​are called in a special way for ease of analysis. In Java, predicates usually begin with the prefix `is` or `has`:

    * `isInfant` -“ is it a baby? ”
    * `hasChildren` -" do you have children? "
    * `isEmpty` -" Is it empty? "
    * `hasErrors` -“ are there any errors? ”

  A function can be considered a predicate **only** ifOperator it returns a boolean.

  ---

  Let's write another predicate function. It accepts the string and checks if it is `"Castle"`:

  ```java
  public static void main(String[] args) {
    System.out.print(isCastle("Sea"));
  }

  public static boolean isCastle(String str) {
    return "Castle".equals(str);
  }
  ```

  <pre class='hexlet-basics-output'>false</pre>


instructions: |

  Write a function `isMister`, which takes a string and checks if it is the word `"Mister"`.

tips:
  - |
    [Naming in programming] (https://ru.hexlet.io/blog/posts/naming-in-programming)

definitions:
  - name: "Predicate"
    description: "an expression that answers a yes or no question using a boolean type."