---

name: Reverse string
theory: |

  Line flip is the simplest algorithmic problem, which is sometimes set at interviews. The correct way to flip a line is to use a function from the standard library, but for learning purposes it is useful to implement it yourself.

  One of the algorithms looks like this: we build a new line by sorting the characters of the source line in reverse order.

  ```java
  public static void main(String[] args) {
  reverseString("Game Of Thrones");  // => senorhT fO emaG
  }
  public static String reverseString(String str)
  {
    int index = str.length() - 1;
    String reversedString = "";

    while (index >= 0) {
      char currentChar = str.charAt(index);
      reversedString = reversedString + currentChar;
      index = index - 1;
    }

    return reversedString;
  }

  ```

  Let's sort the function line by line:

  * `int index = str.length () - 1` write in the new variable the index of the last character of the string (recall that indices start from zero)
  * `String reversedString = ""` initialize the string where we will write the result
  * `while (index> = 0)` condition - repeat the loop body until the current index has reached `0`, that is, to the first character
  * `char currentChar = str.charAt(index)` we take from the string the character at the current index
  * `reversedString = reversedString + currentChar`write a new value to the result string: current result string + new character.
  * `index = index - 1` update counter
  * `return reversedString` when the loop is complete, return the result string.

  When working with strings, programmers often make the mistake of “breaking the line”. In case of incorrect selection of the initial value of the counter or an error in the predicate of the cycle, a situation may arise in which a non-existent symbol is accessed.

  It is especially often forgotten that the index of the last element is always less by one unit of the size of the line. In the lines, the initial index is `0`, which means the index of the last element is `str.length () - 1` (length minus 1).


instructions: |

  Implement the `mysubstr` function, which extracts substrings of a specified length from a string. It takes two arguments as input: a string and a length, and returns a substring starting with the first character:

  Call example:

  ```java
  String str = 'If I look back I am lost';
  mysubstr(str, 1); // => 'I'
  mysubstr(str, 7); // => 'If I lo'
  ```

  Use the same approach as in a function to flip a line from a lesson: collect the result string in a loop, looping through the starting line until a certain point.

tips: []