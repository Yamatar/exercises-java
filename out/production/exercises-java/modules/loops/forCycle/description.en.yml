---

name: For loop
theory: |

  #### Briefly

  ```java
  for (counter; predicate; change counter) {
    // loop body
  }

  //eg
  for (int index = 10; index >= 0; index--) {
    // ...
  }
  ```

  ---

  The `while` loop is ideal for situations where the number of iterations is not known in advance, for example, when searching for a prime number. When the number of iterations is known, it is preferable to use the `for` loop.

  Let's look at the implementation of flipping a string through a `for` loop:

  ```java
  public static String reverseString(String str) {
      String result = "";

      for (int index = str.length() - 1; index >= 0; index--) {
          char currChar = str.charAt(index);
          result = result + currChar;
      }

      return result;
  }
  ```

  You can read like this: *“the loop with the index repeats as long as `index >= 0` and after each step decreases the `index` by 1”*.

  In the definition of the `for` loop there is:

  1. the initial value of the counter
  2. predicate-condition for repeating cycles
  3. description of how the counter changes after each step

  Otherwise, the principle of operation is exactly the same as that of the `while` loop.

  ---

  Let's take a look at the program flow using the example of a function call with a simple string:

  ```java
  reverseString("cat");
  ```

  There are 3 characters in the string, so the loop will have 3 iterations.

instructions: |

  Implement the function `sumOfSeries`, which counts the sum of [a series of integers] (https://ru.wikipedia.org/wiki/Number). The series is given by two numbers - the initial and final.

  The function takes two argument-numbers and returns the sum of the series. For example, for arguments `4, 7` the sum would be `4 + 5 + 6 + 7 = 22`.

  ```java
  sumOfSeries(1, 2); // => 3
  sumOfSeries(1, 3); // => 6
  sumOfSeries(4, 7); // => 22
  ```

  If the initial and final numbers are equal, then the result will be the same number:

  ```java
  sumOfSeries(1, 1); // => 1
  ```

tips: []