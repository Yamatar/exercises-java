---

name: Неизменяемость и примитивные типы
theory: |

  Рассмотрим функцию `Math.round`, которая округляет дробь до целого числа:

  ```java

  double number = 7.7
  double newNumber = Math.round(number);

  System.out.print(newNumber);
  ```

  На экран выведется число `8`.

  Но что будет выведено на экран, если вызвать ` System.out.print(number);`? Выведется старое значение: `7.7`.

  Функция `Math.round` вернула *новые* данные, но не изменила переданные в неё данные. Она не могла это сделать физически, потому что **примитивные типы в Java — неизменяемы**.

  *(Напомним, что примитивные типы — это простые типы, встроенные в сам язык программирования: например, число).*

  В будущих уроках и заданиях мы будем использовать как собственные функции, так и функции из стандартной библиотеки, но никакие функции не смогут изменять данные примитивных типов.

  Число `7.7` — это значение переменной `number`, и само число нельзя изменить. Но переменная называется переменной, потому что её значение можно *заменить на другое значение*.

  То есть мы можем написать:

  ```java
  double number = 7.7
  number = Math.round(number);

  System.out.print(number);
  ```

  Сначала в переменную записывается одно значение, а потом в ту же переменную вместо предыдущего значения записывается новое: то, что вернет вызов `Math.round(number)`.

  Число `number = Math.round(number);` можно прочитать так: *«записать в переменную `number` то, что вернет вызов функции `Math.round` если передать в неё текущее значение переменной `number`»*.

  Мы не изменили число, мы изменили переменную — записали в неё новое число вместо старого.

  Изменение уже существующей переменной может показаться безобидным действием. Но в реальных программах переписывание переменной становится источником проблем. Код с изменяемыми переменными сложно понимать и анализировать: никогда нельзя быть уверенным, какое значение будет у переменной в какой-то момент времени.

  Вы наверняка регулярно сталкиваетесь с багами и ошибками в приложениях, которые используете. Многие вызваны именно обилием изменяемых переменных: такие ошибки сложно найти и исправить.

  Единственное место, где без переменных никак — это циклы, с которыми мы познакомимся позже. Во всех остальных местах относитесь к переменным как к константам — неизменяемым сущностям. Создавайте переменные, задавайте им значение и больше не меняйте.

instructions: |

  Переведите строку, записанную в переменную `str`, в верхний регистр, используя функцию `toUpperCase`. Новое значение запишите в ту же переменную `str`.

  Возможно, вам покажется, что код получился странным. Это типичный пример: переписывание переменных делает код менее понятным и более запутанным.

tips: []
