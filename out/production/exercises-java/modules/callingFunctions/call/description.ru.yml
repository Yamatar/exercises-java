---

name: Функции и их вызов
theory: |

  Как вы заметили, для каждой операции требуется свой собственный символ (оператор): для сложения чисел — `+`, для конкатенации строк — `.`, для деления чисел — `/`, и так далее. Такой подход оправдан только для самых частых операций, ведь в реальной жизни есть тысячи разных задач. К тому же, даже если бы язык программирования включал в себя тысячу разных операторов, в какой-то момент программисту понадобился бы новый.

  Любой язык программирования позволяет расширять набор операций. Такие новые операции называются «функциями». Давайте сначала научимся пользоваться уже созданными функциями, а уже потом будем создавать новые функции.

  В Java есть функция для вывода текста в консоль. Вызовем её:

  ```java
  int result = "Hello world!".indexOf("e");
  System.out.print(result);
  ```

  Мы создали переменную `result` и указали записать в неё результат, который выдаст функция `indexOf`. Запись `indexOf("e")` означает, что вызывается функция с именем `indexOf` и с аргументом (или с параметром) "e". Вызванная функция _вернула_ значение.

  Аргументы — это информация, которую функция получает при вызове. Именно на основе этой информации функция, как правило, вычисляет что-то и выдает результат.

  Функция `indexOf` возвращает индекс в данной строке первого вхождения указанной подстроки. Если эта подстрока не встречается, возвращается -1. В нашем примере мы в строке "Hello World!" искали подстроку "e", поэтому в `result` в итоге оказалось значение 1.

  А вот пример функции, которая не принимает аргументов:

  ```java
  int result = "Hello world!".length();
  ```

  Функция `length` возвращает длину строки.

  Вы можете создавать собственные функции — мы займёмся этим в следующем модуле. Любое действие, которое вы себе можете вообразить, в программировании представлено функциями.

instructions: |

  В 7 королевствах жил один человек, который имел доступ к компьютерам и умел программировать — Сэм Тарли. Он занимался картографией, поэтому он написал для себя функцию `calculateDistance`, высчитываущую расстояние (в лигах) между  городами. Функция принимает два строковых параметра — два названия городов, и возвращает число — расстояние между ними.

  Вот пример использования, где на экран выводится расстояние между Lannisport и Bayasabhad:

  ```java
  int distance = Functions.calculateDistance("Lannisport", "Bayasabhad");
  System.out.print(distance);
  ```

  Первая строчка — это специальный код, подключающий функцию `calculateDistance` в вашу программу. Благодаря ней вы можете запускать функцию, но не видите её содержимое. Это обычное дело в программировании: вы знаете, **что** делает функция и как ей пользоваться, но не знаете **как именно** она работает внутри.

  Воспользуйтесь функцией `calculateDistance` и выведите на экран расстояние между городами Qarth и Vaes Dothrak. Не копируйте пример, а создайте переменную с другим именем и напишите код с нуля самостоятельно.

tips: []

definitions:
  - name: Функция
    description: "операция, способная принимать данные и возвращать результат; функция вызывается так: `foo()`."
  - name: Аргумент
    description: "информация, которую функция получает при вызове. Например, `foo(42)` — передача аргумента `42` функции `foo`"
