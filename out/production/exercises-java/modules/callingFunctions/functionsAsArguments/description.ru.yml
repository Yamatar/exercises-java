---

name: Вызов функций в аргументах функций
theory: |

  Продолжаем тему выражений. Как вы помните, **вызов функции — выражение**, а значит мы можем положить вызов функции в вызов функции (…в вызов функции в вызов функции в вызов… а-а-а!).

  ```java
  String result = "Hello".concat(" world".concat("!"));
  ```

  Мы вызываем функцию `concat` и передаем ей один аргумент:

  - результат вызова функции `concat` с аргументом `"!"`

  Можно сделать то же самое, но с промежуточными шагами:

  ```java
  String secondWord = " world".concat("!");
  String result = "Hello".concat(secondWord);
  ```

  Какой вариант предпочтительнее? Если вычисление совсем простое и неглубокое (не больше одного вложения функции), то можно смело вкладывать вызов в вызов. В остальных ситуациях предпочтительно разбивать вызовы на промежуточные вычисления.

  Причины все те же. Чтение такого кода значительно легче. Во-первых, промежуточные переменные своими названиями отражают суть операций. Во-вторых, такой код легче отлаживать, а промежуточные данные проще исследовать. И в-третьих, глубокие вложенные вызовы сложно читать.

instructions: |

  Для построения генеалогического дерева семьи Старков Сэм написал функцию `parentFor`, которая возвращает имя родителя, если передать ей первым параметром имя ребенка. Вторым параметром функция принимает строчку `father` или `mother`. Так функция понимает, кого из родителей возвращать. По умолчанию параметр равен `mother`. То есть, если нужно узнать имя матери, то можно не передавать специально `mother`, а передать лишь один параметр — имя ребенка.

  Напишите программу, которая выводит на экран имя **деда** Джоффри по материнской линии. Полное имя Джоффри на английском: `Joffrey Baratheon`.

tips: []
