---

name: Создание (определение) функции
theory: |

  Пора научиться создавать собственные функции! Код, в котором создаётся функция, называется **определением функции**.

  Вот простейший пример функции, которая печатает в консоль '"Hello world!"':

  ```java
  public static void sayHello() {
    System.out.print("Hello world!");
  }
  ```
  Методы могут возвращать или не возвращать значения, могут вызываться с указанием параметров или без. Тип возвращаемых данных указывают при объявлении метода — перед его именем.

  В примере выше метод просто печатает в консоль и ничего не должен возвращать, поэтому тип возвращаемого значения — void.

  В заголовке метода сначала идут модификаторы, определяющие, на каких условиях он доступен для вызова.

  Метод с модификатором public можно вызывать из любого класса, в том числе размещенного во внешнем файле. Если нужно, чтобы метод был доступен исключительно внутри своего класса, применяют модификатор private. Есть и более мягкий вариант ограничения доступа: методы с модификатором protected доступны подклассам своего класса и другим классам из того же пакета. Чем сложнее получить доступ к методу извне, тем безопаснее — ниже риск ошибок.

  Иногда требуется определить член класса, который будет использоваться независимо от любого объекта этого класса. И его можно использовать самостоятельно без ссылки на конкретный экземпляр. Для создания подобного члена класса, нужно в начало его объявления перед объявлением типа поместить ключевое слово static. В этом случае он становится доступен до создания каких-либо объектов его класса и без ссылки на какой-либо объект.

  Чтобы Java-приложение могло работать, в его базовом классе обязательно нужно объявить такой метод main.

  ```java
  public static void main(String[] args) {

  }
  ```

  Создадим нашу первую функцию. У неё будет одна задача: выводить на экран текст `Today is: December 5`.

  Нужно назвать функцию так, чтобы из названия была понятна её задача. Давайте дадим ей имя `showDate`:

  ```java
  public static void showDate() {
    String text = "Today is: December 5";
    System.out.print(text);
  }
  ```

  В нашей функции только две строчки кода, но их может быть сколько угодно. Функции можно считать программами внутри программ.

  Вот полная программа, c определением функции и вызовом:

  ```java
  public static void main(String[] args) {
    showDate();
  }

  public static void showDate() {
    String text = "Today is: December 5";
    System.out.print(text);
  }
  ```

  <pre class='hexlet-basics-output'>Today is: December 5</pre>

  ---

  Мы могли бы использовать подобную функцию на сайте или в какой-нибудь программе чтобы выводить текущую дату на экран. Но в текущем виде функция не справится с задачей, ведь она всегда выводит `Today is: December 5`.

  Давайте улучшим функцию так, чтобы она принимала дату в качестве аргумента и выводила её на экран.

  Определим и вызовем нашу обновленную функцию:

  ```java
  public static void main(String[] args) {
    showDate("January 29");
  }

  public static void showDate(String date) {
    String text = "Today is: December " + date;
    System.out.print(text);
  }
  ```

  <pre class='hexlet-basics-output'>Today is: January 29</pre>

  Теперь понятно, зачем нужны были круглые скобки после имени функции: в них *можно* указать аргументы. Теперь наша функция принимает один аргумент — `text`.

  Заметьте: мы не создаём переменную `text`, но используем её в теле функции. Java работает так: переменная сама создаётся при вызове и указанное значение (в нашем примере — `'January 29'`)  записывается в эту переменную.

  Аргументы можно называть как угодно, их имена имеют смысл исключительно в теле функции.

  ---

  Аргументов может быть несколько. В таком случае в определении функции мы делаем то же самое, что в вызове: просто указываем аргументы через запятую.

  Полный пример определения функции с несколькими аргументами и её вызова:

  ```java
  public static void main(String[] args) {
    showDate("January", "29");
  }

  public static void showDate(String month, String day) {
    String text = "Today is: December " + month + " " + day;
    System.out.print(text);
  }
  ```

  <pre class='hexlet-basics-output'>Today is: January 29</pre>

  Главное — помнить про порядок: в каком порядке аргументы стоят при определении функции, в таком же порядке они должны передаваться при вызове.

instructions: |

  Реализуйте функцию `printJaimesLine`, которая принимает один аргумент — строку, и выводит реплику на экран в формате `JAIME: переданная_строка`.

  Как назвать переменную, которая будет аргументом — решайте сами.

  Наша система содержит код, скрытый от вас. В этом упражнении скрыт вызов функции `printJaimesLine`. Так мы проверяем ваше решение.

  Вам не нужно самостоятельно вызывать функцию, только **определить её**. Но для наглядности — вот как наша система вызывает её:

  ```java
  printJaimesLine("Farewell, my friend...");
  ```

  <pre class='hexlet-basics-output'>JAIME:  Farewell, my friend...</pre>

tips:
  - |
    [Именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)
