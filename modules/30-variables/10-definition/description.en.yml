---

name: What is a variable
theory: |

  Script writers sat down to write a script for the film adaptation of "Game of Thrones." George Martin insisted on using Java. Here is a fragment of the script:

  ```java

  println("JAIME");
  println(": A sword for the wall?\n");

  println("JON SNOW");
  println(": I already have one.\n");

  println("JAIME");
  println(": Good man. Have you swung it yet?\n");

  println("JON SNOW");
  println(": Of course I have.\n");
  ```

  The screen will display a neat dialog:

  ```
  JAIME: A sword for the wall?
  JON SNOW: I already have one.
  JAIME: Good man. Have you swung it yet?
  JON SNOW: Of course I have.
  ```

  The writers began to worry: what if I had to change the name of a character? We'll have to make a thousand changes in a huge text! It would be more convenient if the names of the heroes were stored somewhere in one place, but were used as many times as necessary. And if they need to be changed, then it would be enough to do it only in one place.

  In Java, this is possible using **variables**. A variable is just that single “place” where some information is stored. Create two variables to hold two names:

  ```java
  String kingslayer = "JAIME";
  String bastard = "JON SNOW";
  ```

  ... and replace the names of the characters in the script itself with ** access to variables **:

  ```java
  println(kingslayer);
  println(": A sword for the wall?\n");

  println(bastard);
  println(": I already have one.\n");

  println(kingslayer);
  println(": Good man. Have you swung it yet?\n");

  println(bastard);
  println(": Of course I have.\n");
  ```

  The producers just decided to change the name of one of the characters: they do not like Jon Snow, they want Ivan Snegin.

  Although John Snow appears in the script thousands of times, it's easy to change his name:

  ```java

  String kingslayer = "JAIME";
  String bastard = "IVAN SNEGIN";

  println(bastard);
  println(": I already have one.\n");

  println(kingslayer);
  println(": Good man. Have you swung it yet?\n");

  println(bastard);
  println(": Of course I have.\n");
  ```

  Result on the screen:

  ```
  JAIME: A sword for the wall?
  IVAN SNEGIN: I already have one.
  JAIME: Good man. Have you swung it yet?
  IVAN SNEGIN: Of course I have.
  ```

  The use of variables can be compared with a mirror in which an object is reflected. You can light one candle and put ten mirrors. Get ten identical reflections. But if you want to replace the ten reflections of the candles with ten reflections of the light bulb, then you don’t need to touch the mirrors. It is necessary to replace the candle itself.

  You cannot see the reflection of an object if the object does not exist. With variables also: you cannot use a variable until it is created.

  Therefore, if you move the creation of variables down and try to use them before creation, then such a program **will not work!**

  ```java
  println(kingslayer);
  println(": A sword for the wall?\n");

  println(bastard);
  println(": I already have one.\n");

  println(kingslayer);
  println(": Good man. Have you swung it yet?\n");

  println(bastard);
  println(": Of course I have.\n");

  String kingslayer = "JAIME";
  String bastard = "JON SNOW";
  ```

  It turns out that working with variables is two separate actions:

  1. Create a variable once.
  2. Use a variable as many times as you like.

  Variables are created by a special construction of the form `dataType nameVariable'. The variable name must begin with a letter (small) and may consist of letters (Unicode) of numbers and an underscore "_". It is technically possible to start a variable name also with “$” or “_”, however this is prohibited by the Java Code Conventions code convention.

  The scriptwriters named the variables `kingslayer` and` bastard`, but they could be called anything. Variable names are designed to help programmers read and understand code. You can call the variable `x` or` kafk2igh2` - and for the Java interpreter, and for the computer there will be no difference. But it will be difficult for a programmer to understand what such a variable means.

  There is a joke among developers: “the most difficult thing in programming is the names of variables and cache invalidation”. It’s really hard to come up with names. What would you call a variable that stores _ "the number of unpaid orders from customers who have debts in the previous quarter?" _.

  We read the code much more often than we write. And not your own, but written by other people. From the quality and clarity of variable names depends half the success in analyzing the code.

  It is better to sit and come up with a name that describes the essence, meaning of the variable, than to name it at random, and in the future to redo it. Try to give them such names so that they are as clear as possible without context, without studying the surrounding code.

  I propose an interesting exercise: think up a name for the variable in which the _ "number of brothers and sisters of the king" will be stored _. Write it in a notebook or send it to yourself by mail. Do not specify there, except the name of the variable. And after a few lessons we will come back.

instructions: |

  Create a variable named `motto` and the contents of `What is Dead May Never Die!`. Print the contents of the variable.

tips:
  - |
    [Naming in programming] (https://ru.hexlet.io/blog/posts/naming-in-programming)

definitions:
  - name: "Variable"
    description: "a way to save information and give it a name for later use in the code."