---

name: Conditional construction
theory: |

  #### Briefly

  ```
  if (condition) {
    // code to be executed
    // if the condition is true
  }
  ```

  ---

  The predicate's task is to get an answer to a question, but usually this is not enough and you need to take a certain action depending on the answer.

  We write a function that determines the type of the transferred offer. For starters, it will distinguish regular from interrogative sentences.

  ```java
  public static void main(String[] args) {
    getTypeOfSentence("Hodor"); // => normal
    getTypeOfSentence("Hodor?"); // => question
  }

  public static String getTypeOfSentence(String sentence) {
    char lastChar = sentence.charAt(sentence.length() - 1); // способ извлечь последний символ
    if (lastChar == '?') {
      return "question";
    }
    return "normal";
  }
  ```

  `if` - instruction. In parentheses, the predicate expression is passed to it, and then the block of code in curly brackets is described. This **сode block will be executed only if the predicate is true**.

  If the predicate is false, then the code block in braces is skipped, and the function continues its execution.

  In our case, the next line of code - `return "normal";` - causes the function to return a string and end.

  As you can see, `return` can be anywhere in a function. Including inside the code block with the condition.

  ---

  If the curly brackets after `if` contain only one line of code, then you can not write curly brackets and do so:

  ```java
  public static void main(String[] args) {
    System.out.println(getTypeOfSentence("Hodor")); // => normal
    System.out.printl(getTypeOfSentence("Hodor?")); // => question
  }

  public static String getTypeOfSentence(String sentence) {
    char lastChar = sentence.charAt(sentence.length() - 1); // способ извлечь последний символ
    if (lastChar == '?')
      return "question";

    return "normal";
  }
  ```

  We advise you not to do this and **always write curly brackets**. In this case, it is clearly visible where the body of the condition begins and ends. The code becomes more clear and understandable.

instructions: |

  Implement the `getSentenceTone` function, which accepts a string and determines the tone of the sentence. If all the characters are in upper case, then this is the scream `"scream"`. Otherwise, the normal sentence is `"normal"`.

  Algorithm:

  1. Generate an uppercase string based on the argument string using `toUpperCase`.
  2. Compare it with the source line:
     - If the strings are equal, then the string is an uppercase argument.
     - Otherwise, the string-argument is not uppercase.

tips: []

definitions:
  - name: "Conditional construction"
    description: "a way to set a condition for code execution. For example, `if (x > 10) {...}`"