---

name: Предикаты
theory: |

  Вспомним функцию `isInfant` из прошлого урока:

  ```java
  public static boolean isInfant(int age) {
      return age < 1;
  }
  ```

  `isInfant` — это функция-предикат.

  **Предикат отвечает на утвердительный вопрос «да» или «нет», возвращая значение типа boolean.**

  Предикаты во всех языках принято именовать особым образом для простоты анализа. В Java предикаты как правило начинаются с префикса `is` или `has`:

    * `isInfant` — «младенец ли?»
    * `hasChildren` — «есть ли дети?»
    * `isEmpty` — «пустой ли?»
    * `hasErrors` — «есть ли ошибки?»

  Функция может считаться предикатом **только** если она возвращает boolean.

  ---

  Давайте напишем еще одну функцию-предикат. Она принимает строку и проверяет, является ли она словом `"Castle"`:

  ```java
  public static void main(String[] args) {
    System.out.print(isCastle("Sea"));
  }

  public static boolean isCastle(String str) {
      return "Castle".equals(str);
  }
  ```

  <pre class='hexlet-basics-output'>false</pre>


instructions: |

  Напишите функцию `isMister`, которая принимает строку и проверяет, является ли она словом `"Mister"`.

tips:
  - |
    [Именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)

definitions:
  - name: "Предикат"
    description: "выражение, отвечающее на вопрос «да» или «нет» с помощью типа boolean."
