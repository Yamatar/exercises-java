---

name: Конкатенация
theory: |

  Мы уже знаем о математической операции сложения. Такая программа:

  ```java
  println(5 + 3);
  ```

  выведет на экран `8` — результат работы бинарного оператора `+` с операндами `5` и `3`.

  Над строками определены свои операции. Можно «сложить» две строки. Такая программа:

  ```java
  println("Dragon" + "stone");
  ```

  выведет на экран `Dragonstone` — результат работы бинарного оператора `+` с операндами 'Dragon' и 'stone'.

  Эта операция называется **конкатенацией**. Грубо говоря, это «склеивание» строк. Склеивание всегда происходит в том же порядке, в котором записаны операнды, другими словами, левый операнд становится левой частью строки, а правый — правой.

  Вот еще несколько примеров:

  ```java
  println("Kings" + "wood");     // => Kingswood

  println("Kings" + "road");     // => Kingsroad

  println("King's" + "Landing"); // => King'sLanding
  ```

  В последнем примере название города получилось с ошибкой: *King's Landing* нужно писать через пробел! Но в наших начальных строках не было пробелов, а пробелы в самом коде слева и справа от символа `.` не имеют значения, потому что они не являются частью строк.

  Попробуем решить эту проблему разными способами:

  ```java
  println("King's " + "Landing"); //  => King's Landing

  println("King's" + " Landing"); //  => King's Landing

  println("King's" + " " + "Landing"); //  => King's Landing
  ```

  Пробел — такой же символ, как и другие, поэтому сколько пробелов поставить в строке — столько и получится:

  ```java
  println("King's " + " Landing");   // => Kings  Landing

  println("King's  " + "  Landing"); // => Kings    Landing
  ```

instructions: |

  Выведите на экран

  ```
  Winter came for the House of Frey.
  ```

  используя конкатенацию слов. Каждое слово должно быть представлено отдельной строкой. Не забудьте о пробелах.

definitions:
  - name: "Конкатенация"
    description: |
      операция соединения двух строк. Например, `println("King's " . " Landing");`
