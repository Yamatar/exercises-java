---

name: Изменяемость Date
theory: |

  В отличие от всех типов данных, с которыми мы имели дело в предыдущих уроках,
  значения типа Date можно изменять. На самом деле в Java все типы делятся на примитивные
  и ссылочные. Значения переменных примитивных типов хранятся в самой переменной, а
  переменные ссылочного типа хранят не само значение, а ссылку на него. К ссылочным типам
  относятся, например, строки, а в некоторых случаях и числа.

  Раз что ссылочные переменные хранят только ссылку на значение, то несколько таких переменных
  могут ссылаться на одно и то же значение. Для строк или чисел это не так важно, потому что
  эти типы так устроены, что не предоставляют способов изменить значение. Если целое
  число типа Integer создано со значением 3, то оно всегда будет иметь такое значение. Но значения
  типа Date можно изменять, не меняя саму ссылку, как в этом примере:

    ```java

    var date = new DateTime();
    date.setYear(2000);
    System.out.print(date);
    ```

    Будет выведена не текущая дата, как было бы после date = new DateTime(), а такая же
    дата, но в 2000 году. И хотя мы подаем в print ту же ссылку, что и раньше, изменилось
    значение, на которое она указывает, и эффект от этого почти такой же, как если бы
    мы заново присвоили переменную date.

    Помимо того, что таким образом можно менять значения, хранящиеся в переменных,
    не изменяя сами переменные, то же самое правило действует и для аргументов функций.
    Передав в функцию Date, мы не можем быть уверены, что эта функция его не изменит
    (как мы уже знаем, такое изменение чего-то за пределами функции будет **побочным эффектом**).
    На этом этапе обучения мы не готовы давать какие-то рекомендации по этому поводу,
    но поскольку в предыдущих уроках утверждалась неизменяемость аргументов функции, полезно
    знать о такой возможности обхода этой неизменяемости: конечно, переменные, переданные
    в функцию, она не изменит, но вот значения Date, на которые эти переменные указывают -
    может изменить, и эффект с точки зрения вызывающего кода может оказаться таким же.
    
