---

name: Functions and their call
theory: |

  As you noticed, each operation requires its own character (operator): for adding numbers - `+`, for concatenating strings - `.`, for dividing numbers - `/ `, and so on. This approach is justified only for the most frequent operations, because in real life there are thousands of different tasks. Moreover, even if the programming language included a thousand different operators, at some point a new programmer would be needed.

  Any programming language allows you to expand the set of operations. Such new operations are called "functions." Let's first learn how to use the already created functions, and only then we will create new functions.

  In Java, there is a function to display text in the console. Call it:

  ```java
  int result = "Hello world!".indexOf ("e");
  System.out.print(result);
  ```

  We have created the variable `result` and have specified to write the result into it, which will be returned by the function `indexOf`. The entry `indexOf (" e ")` means that a function is called with the name `indexOf` and with an argument (or with a parameter) "e". The function invoked value.

  Arguments are the information that the function receives when it is called. It is on the basis of this information that the function, as a rule, calculates something and gives the result.

  The function `indexOf` returns the index in the given string of the first occurrence of the specified substring. If this substring is not found, -1 is returned. In our example, we are in the string "Hello World!" searched for the substring "e", therefore in `result` the value of 1 ended up.

  Here is an example of a function that takes no arguments:

  ```java
  int result = "Hello world!".length();
  ```

  The `length` function returns the length of a string.

  You can create your own functions - we'll do this in the next module. Any action you can imagine is represented in programming by functions.

instructions: |

  In 7 kingdoms there lived one person who had access to computers and knew how to program - Sam Tarley. He was engaged in cartography, so he wrote for himself the function `calculateDistance`, calculating the distance (in leagues) between cities. The function takes two string parameters - two city names, and returns a number - the distance between them. Every function in Java belongs to some class, Sam put his function into a class he named Functions.

  Here is an example of use, where the distance between Lannisport and Bayasabhad is displayed:

  ```java
  int distance = Functions.calculateDistance("Lannisport", "Bayasabhad");
  System.out.print(distance);
  ```

  Use the function `calculateDistance` and display the distance between the cities of Qarth and Vaes Dothrak. Do not copy the example, but create a variable with a different name and write the code from scratch yourself.

tips: []

definitions:
  - name: Function
    description: "an operation that can receive data and returnValue a result; the function is called like this:` foo () `."
  - name: Argument
    description: "information that the function receives when it is called. For example,` foo (42) `- passing the argument` 42` to the function `foo`"
