---

name: Функции и их вызов
theory: |

  Как вы заметили, для каждой операции требуется свой собственный символ (оператор): для сложения чисел — `+`, для конкатенации строк — `.`, для деления чисел — `/`, и так далее. Такой подход оправдан только для самых частых операций, ведь в реальной жизни есть тысячи разных задач. К тому же, даже если бы язык программирования включал в себя тысячу разных операторов, в какой-то момент программисту понадобился бы новый.

  Любой язык программирования позволяет расширять набор операций. Такие новые операции называются «функциями». Давайте сначала научимся пользоваться уже созданными функциями, а уже потом будем создавать новые функции.

  Аналогично математике, в Java функция - это некое преобразование, которое применяется к каким-то значениям-аргументам и выражает через них свое значение, то есть вычисляет основываясь на значениях аргументов некий результат, который называется значением функции при этих значениях аргументов. Еще значение функции называют возвращаемым значением - потому что оно из функции возвращается в вызывающий ее код). Так, функция взятия меньшего из двух чисел сравнивает их, и своим результатом назначает то, которое меньше.

  Инструкция java для вычисления значения функции на заданных значениях аргументов называется вызовом функции.

#  В Java есть функция для вывода текста в консоль. Вызовем её:
#Ниче не понял. Мы должны показать как вызывать функции. А вместо этого мы вызыаем функцию вывода текста в консоль.
#Это плохой пример потому что 1) она не возврвщает ничего 2) на деле тут акцент на indexOf но задача-то поставлена не так
#Предлагаю сделать иначе. Поставить задачу вызвать какую-то статическую функцию - скажем Math.min - и результат ее присвоить переменной.
#при этом вызывать print() не нужно, а вместо этого см далее коммент
  ```java
  int result = "Hello world!".indexOf("e");
  System.out.print(result);
  ```

  Мы создали переменную `result` и указали записать в неё результат (возвращаемое значение), который вернет функция `indexOf`. Запись `indexOf("e")` означает, что вызывается функция с именем `indexOf` и с аргументом (или с параметром) "e". Вызванная функция _вернула_ значение.

  Аргументы — это информация, которую функция получает при вызове. Именно на основе этой информации функция, как правило, вычисляет что-то и выдает результат.

  Функция `indexOf` возвращает индекс в данной строке первого вхождения указанной подстроки. Если эта подстрока не встречается, возвращается -1. В нашем примере мы в строке "Hello World!" искали подстроку "e", поэтому в `result` в итоге оказалось значение 1.
#...и вот тут мы уже можем написать - вы вероятно заметили сходство между вызовом этой функции и вызовом System.out.print(); это потому что System.out.print тоже функция,
#только она не возвращает никакого значения. В норме функции вызывают, чтобы использовать возвращенные ими значения, но иногда (про это впереди будет урок про сайд-эффекты)
#функцию вызывают ради чего-то другого, что эта функция делает в процессе вычисления результата, в случае System.out.print() функция в процессе своей работы выводит переданный ей аргумент
#в консоль, и именно ради этого сайд-эффекта мы ее и вызываем.
  А вот пример функции, которая не принимает аргументов:

  ```java
  int result = "Hello world!".length();
  ```

  Функция `length` возвращает длину строки.

  Вы можете создавать собственные функции — мы займёмся этим в следующем модуле. Любое действие, которое вы себе можете вообразить, в программировании представлено функциями.

instructions: |

  В 7 королевствах жил один человек, который имел доступ к компьютерам и умел программировать — Сэм Тарли. Он занимался картографией, поэтому он написал для себя функцию `calculateDistance`, высчитывающую расстояние (в лигах) между  городами. Функция принимает два строковых параметра — два названия городов, и возвращает число — расстояние между ними. Любая функция в java относится к какому-то классу, свою Сэм отнес к классу Functions.

  Вот пример использования, где на экран выводится расстояние между Lannisport и Bayasabhad:

  ```java
  int distance = Functions.calculateDistance("Lannisport", "Bayasabhad");
  System.out.print(distance);
  ```
  Этот код запускает вычисление функции calculateDistance

  Воспользуйтесь функцией `calculateDistance` и выведите на экран расстояние между городами Qarth и Vaes Dothrak. Не копируйте пример, а создайте переменную с другим именем и напишите код с нуля самостоятельно.
#В следующем модуле мы будем собственные функции писать - нужно будет пояснить почему
#для них не нужно указывать название класса. А еще лучше будет написать сначала с названием
#класса (для этого надо чтоб функция сразу же была static - ну и ладно), а потом показать
#что при обращении из другой функции этого же класса можно обойтись и без указания имени класса.

tips: []

definitions:
  - name: Функция
    description: "операция, способная принимать данные и возвращать результат; функция вызывается так: `foo()`."
  - name: Аргумент
    description: "информация, которую функция получает при вызове. Например, `foo(42)` — передача аргумента `42` функции `foo`"
