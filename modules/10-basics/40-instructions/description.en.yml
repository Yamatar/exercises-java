---

name: Statements
theory: |

  The instruction is a command for the computer. Java code is a set of instructions that are usually separated from each other by the `;`.
  Here is an example code with two instructions:

  ```java
  println("Mother of Dragons.");
  println("Dracarys!");
  ```

  When you run this code, two sentences are displayed sequentially:

  ```
  Mother of Dragons.
  Dracarys!
  ```

  Theoretically, you can write instructions one after the other without transferring to a new line:

  ```java
  println("Mother of Dragons."); println("Dracarys!");
  ```

  The result on the screen will be the same, but in practice this approach is considered bad.
    
  **Why writing multiple instructions in one line is considered bad**
  With experience, programmers develop the skill of quickly reading code, as some read texts - "diagonally", only in programming it is rather "at the beginning of lines" - the look quickly runs from top to bottom and captures only the beginning of instructions, immediately dismissing unimportant and continuing to read instructions only in case you understand that the instruction is important. For example, you, among a large number of lines of code, look for a line that prints something - and when you see the expression 'println', stop and read the instruction already. So - if the instruction `println` turns out to be to the right of some other expression - you just skip it and not find it. This is very confusing, which is why this practice is considered bad.

  *Do semicolons appear at the end of instructions?**
  In JShell (where we are still writing code, because we have not studied classes yet), a simplified scheme is used, according to which the `;` symbol is optional and instead the border between the two instructions can be the transition to the next line.
  It works like this: when switching to a new line, Java tries to interpret an already entered line as a separate instruction and, if it does, the result is accepted as part of the program, if not, you get an additional indented line where you continue to write instructions. This happens until the expression acquires integrity and it becomes possible to interpret it as a fully entered instruction:

  ```
  jshell> println (
     ...> "Stannis"
     ...>)
  Stannis

  jshell>
  ```
  Therefore, in spite of their non-obligation, in the code examples we, starting with this lesson, will still put the characters `;` at the end of each instruction, so that you prepare ahead of time to go to work with classes, where from the approach with line breaks still have to refuse. To write more complex programs in Java, all instructions will have to be separated from the others by the `;`.

instructions: |
  Display three names one after another: `Robert`,` Stannis`, `Renly`. As a result, the screen should display:

  ```
  Robert
  Stannis
  Renly
  ```
    
  For each name, use your own `println` call.
  (Since they are not mandatory, we will not be able to verify this, but still try to train yourself to put the characters `;` at the end of the instructions - it will be easier for you later)
tips: []

definitions:
  - name: statement
    description: |
      A command for a computer written in a programming language. Java code is a set of instructions, separated from each other by the `;`.
      In JShell, the symbol for the next line can appear instead.