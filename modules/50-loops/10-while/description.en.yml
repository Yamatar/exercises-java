---

name: While Loop
theory: |

  #### Briefly

  ```
  while (condition) {
    // code that will be repeated
    // while the condition is true
  }
  ```

  ---

  Computers can tirelessly repeat the actions tens, hundreds, thousands of times. Programming for repetitions uses **cycles**.

  Let's write a function with a cycle that will display numbers from 1 to the argument number:

  ```java
  public static void main(String[] args) {
    printNumbers(3);
  }

  public static void printNumbers(int lastNumber) {
    int i = 1;

    while (i <= lastNumber) {
      System.out.println(i);
      i = i + 1;
    }
    System.out.print("finished!");
  }
  ```

  <pre class='hexlet-basics-output'>1<br>2<br>3<br>finished!</pre>

  The construction reads like this: “do what is indicated in the body of the cycle while the condition (predicate) `i <= lastNumber` is true”.

  The while loop consists of three elements:

  * Keyword `while`.
  * Predicate in brackets after `while`.
  * Code block in curly brackets (loop body).

  Each body execution is called an **iteration**. In our example, the call `printNumbers(3)` spawned three iterations, on each of which the variable `i` was displayed.

  The most important thing in the cycle is completion (exit). The process that generates the cycle should eventually stop. The responsibility for stopping lies entirely with the programmer.

  Usually the task is reduced to the introduction of a variable called "counter". First, it is initialized, that is, it is given an initial value. In our example, this is the line `i = 1`. Then in the cycle condition it is checked whether the counter has reached its limit value.

  In our example, the limit value is determined by the function argument. If the cycle condition is not met, the body is not met and the interpreter moves on, following the instructions after the loop. But if the condition of the cycle is true, then the body in which the key element of the stop is located is the change in the counter. It is usually done at the end of the body, and this change is one of the rare places where it is impossible to do without a variable. In our example, the line `i = i + 1` is responsible for the change.

instructions: |

  Modify the `printNumbers` function so that it prints the numbers in reverse order. To do this, go from the top to the bottom. That is, the counter should be initialized with the maximum value, and in the body of the loop it should be reduced to the lower limit.

  Sample call and output:

  ```java

  printNumbers(4);
  // => 4
  // => 3
  // => 2
  // => 1
  // => finished!
  ```

tips: []

definitions:
  - name: "While loop"
    description: "instruction to repeat the code until some condition is satisfied."