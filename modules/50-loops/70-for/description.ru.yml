---

name: Цикл For
theory: |

  #### Вкратце

  ```java
  for (счётчик; предикат; изменение счётчика) {
    // тело цикла
  }

  // например
  for (int index = 10; index >= 0; index--) {
    // ...
  }
  ```

  ---

  Цикл `while` идеален для ситуаций, когда количество итераций неизвестно заранее, например, при поиске простого числа. Когда количество итераций известно, предпочтительнее использовать цикл `for`.

  Посмотрим реализацию переворота строки через цикл `for`:

  ```java
  public static String reverseString(String str) {
      String result = "";

      for (int index = str.length() - 1; index >= 0; index--) {
          char currChar = str.charAt(index);
          result = result + currChar;
      }

      return result;
  }
  ```

  Можно читать так: *«цикл с индексом `index` повторяется пока `index >= 0` и после каждого шага уменьшает `index` на 1»*.

  В определении цикла `for` есть:

  1. начальное значение счетчика
  2. предикат-условие повторения циклов
  3. описание того, как счётчик меняется после каждого шага

  В остальном принцип работы точно такой же, как у цикла `while`.

  ---

  Давайте рассмотрим ход движения программы на примере вызова функции с простой строкой:

  ```java
  reverseString("cat");
  ```

  В строке 3 символа, поэтому в цикле будет 3 итерации.

instructions: |

  Реализуйте функцию `sumOfSeries`, которая считает сумму [ряда целых чисел](https://ru.wikipedia.org/wiki/Числовой_ряд). Ряд задаётся двумя числами — начальным и конечным.

  Функция принимает два аргумента-числа и возвращает сумму ряда. Например, для аргументов `4, 7` сумма будет `4 + 5 + 6 + 7 = 22`.

  ```java
  sumOfSeries(1, 2); // => 3
  sumOfSeries(1, 3); // => 6
  sumOfSeries(4, 7); // => 22
  ```

  Если начальное и конечное числа равны, то результатом будет то же число:

  ```java
  sumOfSeries(1, 1); // => 1
  ```

tips: []
