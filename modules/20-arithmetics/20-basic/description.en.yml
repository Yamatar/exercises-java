---

name: Arithmetic operations
theory: |
  To add two numbers in mathematics, we write, for example, `3 + 4`. In programming, the same thing. Here is a program that adds two numbers:

  ```java
  // Do not forget the semicolon at the end, since each line in the code is an instruction.
  3 + 4;
  ```

  (Remember about the comments? Higher in the code after the characters `//` - a comment from the teacher).

  Arithmetic in programming is practically no different from school arithmetic.

  Line code `3 + 4;` means the command to add the numbers and find out the result. This program will work, but it does not make sense, because as a matter of fact **we do not give any command**, we simply show “the sum of three and four”. In real work, it is not enough to simply report a mathematical expression. For example, when creating an online store, it is not enough just to calculate the cost of goods in the basket, but you also need to calculate the cost **AND** to show the price to the buyer.

  We need to add `3 + 4` **And** give the command to do something with the result. For example, display it on the screen:

  ```java
  // again, do not forget the semicolon at the end of the line
  System.out.print(3 + 4);
  ```

  After launch, the result will appear on the screen:

  ```
  7
  ```

  In addition to addition, the following operations are available:

  * `*` - multiplication
  * `/` - division
  * `-` - subtraction
  * `%` - [the remainder of the division] (https://ru.wikipedia.org/wiki/Dividing_with_lots)

  Now let's display the result of the division, and then the result of the multiplication:

  ```java
  System.out.print(8 / 2); // => 4
  System.out.print(3 * 2); // => 6
  ```

  Sometimes for convenience, we will show in the comments the result of running lines of code like this: `=> RESULT. For example, `// => 4`.

  The first instruction will display `4` (because 8 / 2 is 4), and the second instruction will display 6 (because 3 * 2 is 6).

instructions: |

  Display the result of dividing the number `81` by` 9`.

tips:
  - Always beat off arithmetic operators with spaces from the numbers (operands) themselves - this is a good programming style. Therefore, in our examples, `System.out.print(3 + 4)`, and not `System.out.print(3 + 4)`.
  - Dividing by zero results in an error. To prevent it, you need to know about conditional constructions (you will learn about them in the following lessons).
  - "If the editor has the entry` // BEGIN` and `// END`, then the code should be written between these lines."